{"version":3,"file":"static/js/853.8340fb9e.chunk.js","mappings":"gOAGaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAGrBC,GAAuBC,EAAAA,EAAAA,IAClC,CAACP,ECRgC,SAAAC,GAAK,OAAIA,EAAMO,OAAOA,MAAjB,IDStC,SAACN,EAAUM,GACTC,QAAQC,IAAIF,GACZ,IAAMG,EAAiBH,EAAOI,cAE9B,OAAOV,EAASM,QAAO,qBAAGK,KACnBD,cAAcE,SAASH,EADP,GAGxB,I,mBEaH,EA3B2BI,EAAAA,GAAAA,GAAH,khB,mBCEXC,EAAc,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,GAAIL,EAAW,EAAXA,KAClCM,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACGP,EADH,KACWI,GACT,mBAAQI,KAAK,SAASC,QAAS,kBAAMH,GAASI,EAAAA,EAAAA,IAAcL,GAA7B,EAA/B,sBAKL,ECRYM,EAAc,WACzB,IAAMC,GAAiBC,EAAAA,EAAAA,IAAYpB,GAEnC,OACE,SAAC,EAAD,WACE,wBACGmB,EAAeE,KAAI,gBAAGd,EAAH,EAAGA,KAAMK,EAAT,EAASA,GAAID,EAAb,EAAaA,OAAb,OAClB,SAACD,EAAD,CAAsBE,GAAIA,EAAIL,KAAMA,EAAMI,OAAQA,GAAhCC,EADA,OAM3B,E,oBCuBD,EAxCkBH,EAAAA,GAAAA,KAAH,2yB,UCMA,SAASa,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOhB,EAAP,KAAaiB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAec,EAAf,KACMZ,GAAWC,EAAAA,EAAAA,MACXlB,GAAWwB,EAAAA,EAAAA,IAAY1B,GAmBvBgC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,MAER,OAFA,EAAetB,MAGb,IAAK,OACHiB,EAAQK,GACR,MACF,IAAK,SACHJ,EAAUI,GACV,MACF,QACE,MAAM,IAAIC,MAAM,SAErB,EASKC,EAAQ,WACZP,EAAQ,IACRC,EAAU,GACX,EAED,OACE,UAAC,EAAD,CAAWO,SAbQ,SAAAL,GACnBA,EAAEM,iBAjCkB,SAAAC,GACpB,IAAMC,EAAUvC,EAASwC,MACvB,qBAAG7B,KAAgBD,gBAAkB4B,EAAQ3B,KAAKD,aAAlD,IAEF,GAAI6B,EAEF,OADAE,MAAM,GAAD,OAAIH,EAAQ3B,KAAZ,4BACE4B,EAGT,IAAMG,GAAU,QACd1B,IAAI2B,EAAAA,EAAAA,OACDL,GAGLrB,GAAS2B,EAAAA,EAAAA,IAAWF,GACrB,CAoBiBG,CAAc,CAAElC,KAAAA,EAAMI,OAAAA,KACxBoB,GACf,EAQC,WACE,qCAEE,kBACEhB,KAAK,OACLR,KAAK,OACLsB,MAAOtB,EACPmC,UAAQ,EACRC,SAAUjB,QAGd,uCAEE,kBACEX,KAAK,MACLR,KAAK,SACLsB,MAAOlB,EACP+B,UAAQ,EACRC,SAAUjB,QAId,mBAAQX,KAAK,SAAb,2BAGL,CC5Ec,SAAS6B,IACtB,IAAM/B,GAAWC,EAAAA,EAAAA,MACXf,GAAYqB,EAAAA,EAAAA,IAAYtB,GAM9B,OAJA+C,EAAAA,EAAAA,YAAU,WACRhC,GAASiC,EAAAA,EAAAA,MACV,GAAE,CAACjC,KAGF,iCACE,SAAC,EAAD,KACA,yBAAMd,GAAa,4BACnB,SAACmB,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","redux/filter/selectors.js","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.js","pages/ContactsPage.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectContactFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectfindedContacts = createSelector(\n  [selectContacts, selectContactFilter],\n  (contacts, filter) => {\n    console.log(filter);\n    const formatedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(formatedFilter)\n    );\n  }\n);\n","export const selectContactFilter = state => state.filter.filter;\n","import styled from 'styled-components';\n\nconst ContactsListStyled = styled.ul`\n  list-style: none;\n  padding-left: 0;\n  width: 400px;\n  button {\n    cursor: pointer;\n    background-color: #ff69b4;\n    color: white;\n    padding: 4px 8px;\n    font: inherit;\n\n    border-radius: 4px 8px;\n    border: 3px solid #ff1493;\n  }\n  li {\n    background-color: #ffffff;\n    border: 3px solid #ff69b4;\n    padding: 10px;\n    border-radius: 4px;\n    margin-bottom: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 20px;\n  }\n`;\n\nexport default ContactsListStyled;\n","import { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ number, id, name }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </button>\n    </li>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport ContactsListStyled from './ContactList.styled';\n\nimport { selectfindedContacts } from 'redux/contacts/selectors';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\n\nexport const ContactList = () => {\n  const findedContacts = useSelector(selectfindedContacts);\n\n  return (\n    <ContactsListStyled>\n      <ul>\n        {findedContacts.map(({ name, id, number }) => (\n          <ContactItem key={id} id={id} name={name} number={number} />\n        ))}\n      </ul>\n    </ContactsListStyled>\n  );\n};\n","import { styled } from 'styled-components';\n\nconst FormStyle = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  background: rgb(235, 182, 236);\n  background: linear-gradient(\n    90deg,\n    rgba(253, 29, 222, 1) 0%,\n    rgba(235, 182, 236, 0.9809173669467787) 70%\n  );\n  border: 3px solid #ff69b4;\n  border-radius: 4px;\n  label {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 16px;\n    color: #fff;\n    font-size: 20px;\n  }\n  input {\n    font: inherit;\n    width: 375px;\n    padding: 10px;\n    margin: 0 auto;\n    border-radius: 4px;\n    border: 3px solid #ff69b4;\n    cursor: pointer;\n  }\n  button {\n    padding: 8px 12px;\n    font: inherit;\n    cursor: pointer;\n    border-radius: 4px;\n    border: 3px solid #ff69b4;\n    color: #f08080;\n    font-size: 20px;\n  }\n`;\n\nexport default FormStyle;\n","import { useState } from 'react';\nimport FormStyle from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport default function PokemonInfo() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const addContactFoo = contact => {\n    const isExist = contacts.some(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n    if (isExist) {\n      alert(`${contact.name} is already in contacts`);\n      return isExist;\n    }\n\n    const newContact = {\n      id: nanoid(),\n      ...contact,\n    };\n\n    dispatch(addContact(newContact));\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        throw new Error('error');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isExist = addContactFoo({ name, number });\n    if (!isExist) reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormStyle onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          required\n          onChange={handleChange}\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </FormStyle>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectLoading","isLoading","selectfindedContacts","createSelector","filter","console","log","formatedFilter","toLowerCase","name","includes","styled","ContactItem","number","id","dispatch","useDispatch","type","onClick","deleteContact","ContactList","findedContacts","useSelector","map","PokemonInfo","useState","setName","setNumber","handleChange","e","target","value","Error","reset","onSubmit","preventDefault","contact","isExist","some","alert","newContact","nanoid","addContact","addContactFoo","required","onChange","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}